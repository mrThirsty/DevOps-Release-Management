@inherits Base.RMModalBase

@inject ReleaseManagement.Framework.Interfaces.IReleaseDataService service


@using ReleaseManagement.Framework.Data.Model

<div class="simple-form">
    <div class="form-group">
        <label for="item-release-name">Release Name</label>
        <input @bind="Item.ReleaseName" type="text" class="form-control" id="item-release-name" />
    </div>
    <button @onclick="SaveItem" class="btn btn-outline-primary">Save</button>
    <button @onclick="BlazoredModal.CancelAsync" class="btn btn-outline-secondary">Cancel</button>
</div>


@code {

    Release Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string title = "Add Release";

        if (RecordId > 0)
        {
            var response = await service.Find(RecordId);

            Item = UIHelper.ProcessServiceResponse<Release>(response, ToastService);

            title = $"Edit {Item.ReleaseName}";
        }
        else
            Item = new Release();

        BlazoredModal.SetTitle(title);
    }

    private async void SaveItem()
    {
        var response = await service.Save(Item);

        UIHelper.ProcessServiceResponseMessage(response, ToastService);

        if(response.OperationStatus == Framework.Enums.OperationResult.Success)
            await BlazoredModal.CloseAsync(ModalResult.Ok<Release>(Item));
    }
}